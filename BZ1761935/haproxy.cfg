global
  maxconn 20000
  daemon
  log 127.0.0.1:514 local0 info
  nbthread 4

  # ca-base /etc/ssl
  # crt-base /etc/ssl
  # TODO: Check if we can get reload to be faster by saving server state.
  server-state-file /var/tmp/haproxy/run/haproxy.state
  stats socket /var/tmp/haproxy/run/haproxy.sock mode 600 level admin expose-fd listeners
  # stats timeout 2m

  # Increase the default request size to be comparable to modern cloud load balancers (ALB: 64kb), affects
  # total memory use when large numbers of connections are open.
  tune.maxrewrite 8192
  tune.bufsize 327

  # Prevent vulnerability to POODLE attacks
  # ssl-default-bind-options no-sslv3

# The default cipher suite can be selected from the three sets recommended by https://wiki.mozilla.org/Security/Server_Side_TLS,
# or the user can provide one using the ROUTER_CIPHERS environment variable.
# By default when a cipher set is not provided, intermediate is used.
  # Intermediate cipher suite (default) from https://wiki.mozilla.org/Security/Server_Side_TLS
  # tune.ssl.default-dh-param 2048
  # ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS

defaults
  maxconn 20000

  option httplog
  option logasap
  log global
  #option dontlog-normal

  timeout connect 5s
  timeout client 30s
  timeout client-fin 1s
  timeout server 5ms
  timeout server-fin 1s
  timeout http-request 10s
  timeout http-keep-alive 10s

  # Long timeout for WebSocket connections.
  timeout tunnel 1h

    errorfile 400 /home/aim/haproxy-1.8/examples/errorfiles/400.http
    errorfile 403 /home/aim/haproxy-1.8/examples/errorfiles/403.http
    errorfile 408 /home/aim/haproxy-1.8/examples/errorfiles/408.http
    errorfile 500 /home/aim/haproxy-1.8/examples/errorfiles/500.http
    errorfile 502 /home/aim/haproxy-1.8/examples/errorfiles/502.http
    errorfile 503 /home/aim/haproxy-1.8/examples/errorfiles/503.http
    errorfile 504 /home/aim/haproxy-1.8/examples/errorfiles/504.http

frontend FE
  # Added to log requests and responses 
  log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"
  declare capture request len 10000
  declare capture response len 10000
  
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP
  monitor-uri /_______internal_router_healthz

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  bind :4242
  mode http

  default_backend backend

 capture request header Host len 64
 capture request header Connection len 64
 capture request header Content-Type len 64
 capture request header Content-length len 9
 capture request header transfer-encoding len 64

 capture response header Host len 64
 capture response header Connection len 64
 capture response header Content-Type len 64
 capture response header Content-length len 9
 capture response header transfer-encoding len 64
 capture response header Location len 15
  
backend backend
    mode http
    balance roundrobin
    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    #http-request add-header X-Forwarded-Proto https if { ssl_fc }
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost
    server web01 127.0.0.1:9000 check
    server web02 127.0.0.1:9001 check
    server web03 127.0.0.1:9002 check
    # no option http-keep-alive
